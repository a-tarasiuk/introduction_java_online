package com.company;

import com.company.bouquet.Bouquet;
import com.company.builder.BouquetBuilder;
import com.company.constructor.Constructor;

/**
 * Создать консольное приложение, удовлетворяющее следующим требованиям:
 * Корректно спроектируйте и реализуйте предметную область задачи.
 * Для создания объектов из иерархии классов продумайте возможность использования порождающих шаблонов
 * проектирования.
 * Реализуйте проверку данных. вводимых пользователем. но не на стороне клиента.
 * Для проверки корректности переданных данных можно применить регулярные выражения.
 * Меню выбора действия пользователем МОЖНО не реализовывать, ИСПОЛЬЗУЙТЕ ЗАГЛУШКУ.
 * Особое условие: переопределите, где необходимо, методы toString(), equals() и hashCode().
 *
 * Вариант А. Цветочная композиция. Реализовать приложение, позволяющее создавать цветочные композиции
 * (объект. представляющий собой цветочную композицию). Составляющими цветочной композиции являются цветы
 * и упаковка.
 *
 * Вариант В. Подарки. Реализовать приложение. позволяющее создавать подарки (объект, представляющий собой
 * подарок). Составляющими целого подарка являются сладости и упаковка.
 *
 *
 * Применен шаблон проектирования - Строитель.
 *
 * Создан интерфейс "Type", который реализуют перечисления "Flower" и "Pack"
 * с целью использования его в обобщенном (Generic) методе choiceEnum() класса "Constructor"
 * для минимизации кода - создается один метод вместо дублирования кода
 * в методах constructPack() и constructFlower().
 *
 * Структура (и логика программы):
 * 0) Создается класс Message для единого места хранения всех сообщений.
 * 1) Создается интерфейс Builder, в котором объявляются все шаги создания букета.
 * 2) Создается класс BouquetBuilder, реализующий интерфейс Builder,
 *    где уже реализуются конкретные шаги, объявленные в интерфейсе.
 * 3) Создается класс Bouquet (букет) - это уже готовый продукт работый нашей программы.
 * 4) Создается перечисление Flower (цветок) - это конкретный продукт.
 *    Создается перечисление Pack (упаковка) - это конкретный продукт.
 * 5) Создается класс Constructor (конструктор) - это тот класс,
 *    который знает последовательность шагов, чтобы получился букет.
 *    Работает через общий интерфейс - Builder.
 * 6) В итоге в классе Main всё сводится в единое целое.
 */

public class Main {

    public static void main(String[] args) {
        BouquetBuilder builder = new BouquetBuilder();
        Constructor constructor = new Constructor();
        constructor.constructBouquet(builder);
        Bouquet bouquet = builder.getBouquet();
        System.out.println(bouquet.toString());
    }
}
